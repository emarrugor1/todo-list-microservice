plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
}

group = 'co.edu.emarrugo'
version = '0.0.1-SNAPSHOT'

jacoco {
	toolVersion = "0.8.11" // Última versión compatible con Java 21
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.postgresql:r2dbc-postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"co/edu/emarrugo/todo_list_microservice/app/**",
					"co/edu/emarrugo/todo_list_microservice/model/config/**",
					"co/edu/emarrugo/todo_list_microservice/model/entity/**"
			])
		}))
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	maxParallelForks = 1
}

tasks.sonar.dependsOn jacocoTestReport

sonar {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.exclusions", "**/MainApplication.java, **/config/**, **/entity/**"
		property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory.get()}/reports/jacoco/test/jacocoTestReport.xml"
	}
}